import { app, BrowserWindow, ipcMain } from 'electron';
// import puppeteer-core from 'puppeteer-core'
// eslint-disable-next-line @typescript-eslint/no-var-requires
const puppeteer = require('puppeteer-core')
import { getChromePath } from './util'
import { avinodeSearch } from './puppeteer'
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  ipcMain.on('search-avinode', () => {
    // call puppeteer function
    console.log('search-avinode')
    const executablePath = getChromePath()
    // launch puppeteer
    puppeteer.launch({
      executablePath,
      headless: false,
      defaultViewport: null,
      args: ['--start-maximized']
    }).then(async (browser: { newPage: () => any; close: () => any; }) => {
      const page = await browser.newPage()

      await page.goto("https://marketplace.avinode.com/sso/mvc/login");
      // wait for user to login
      await page.type("#username", 'pschneider@luxury.aero'); //use environment variable for this
      await page.type("#password", 'Luxury1!'); //use environment variable for this
      await page.click(
        "body > div.avi-page > div > div > div > div > form > div.avi-button-group.avi-is-section-group > div > button"
      );
      await page.waitForTimeout(1000);
      // await page.waitForNavigation({ timeout: 120000 });
      await page.goto(
     "https://marketplace.avinode.com/marketplace/mvc/search#preSearch"
   );

   await page.waitForNavigation({ timeout: 120000 });

        await page.evaluate(() => {
          window.scrollTo(0, document.body.scrollHeight);
        });

        // when the user clicks click avinode button on electron app, call avinodeSearch function
       ipcMain.on('select-avinode-jets', async () => {
          await avinodeSearch(page)
      });
      });
  });

  ipcMain.on('search-flightlistpro', (event, username, password) => {
    // call puppeteer function
    console.log('search-flightlistpro');
    const executablePath = getChromePath()
    // launch puppeteer
    puppeteer.launch({
      executablePath,
      headless: false,
      defaultViewport: null,
      args: ['--start-maximized']
    }).then(async (browser: { newPage: () => any; close: () => any; }) => {
      const page = await browser.newPage()

      await page.goto("https://flightlistpro.com/user-login");
      console.log('username', username)
      console.log("pass", password)

      await page.type("#user_name", username);
      await page.type("#user_password", password);
      await page.click(
        "body > section:nth-child(5) > div > div > div > div > div > div.col-md-6.col-sm-6.mobile-full-width > div > form > table > tbody > tr:nth-child(4) > td:nth-child(2) > input"
      );
      await page.waitForNavigation({ timeout: 150000 });

      const flightPick = async () => {
        console.log('flightPick')
        // an array of each plane clicked
        await page.evaluate(() => {
          const opAndJet: string[] = [];
          const companyName = document.querySelectorAll(
            "#searchResult_list_ajax > tbody > tr > td.sorting_1 > a"
          ) as NodeListOf<HTMLElement>;
          const jetType = document.querySelectorAll(
            "#searchResult_list_ajax > tbody > tr > td:nth-child(3) > a"
          ) as NodeListOf<HTMLElement>;
          const button = document.querySelectorAll(
            "#searchResult_list_ajax > tbody > tr > td:nth-child(1) > input[type=checkbox]"
          ) as NodeListOf<HTMLElement>;
          const tailNumber = document.querySelectorAll(
            "#searchResult_list_ajax > tbody > tr > td:nth-child(5)"
          ) as NodeListOf<HTMLElement>;

          console.log("tailNumber char at 6", tailNumber[0].innerText.charAt(1));

          for (let i = 0; i < companyName.length - 1; i++) {
            const curCompanyName = companyName[i];

            const curJet = jetType[i];

            const compAndType = `${curCompanyName.innerText} ${curJet.innerText}`;


            if (
              !opAndJet.includes(compAndType)
            ) {
              button[i].click();
              opAndJet.push(`${curCompanyName.innerText} ${curJet.innerText}`);
            }
          }
          // we need to return the opAndJet array so that it can be used in the next page function and add it to the allSelects array
          return opAndJet;
        });



        // if there is a next page button then click it
        // const nextPage = await page.evaluate(() => {
        //   const nextPage = document.querySelectorAll(
        //     "#searchResult_list_ajax_wrapper > div.bottom > div.dataTables_paginate.paging_full_numbers > ul > li.paginate_button.next > a"
        //   ) as NodeListOf<HTMLElement>;
        //   console.log("nextPage", nextPage);
        //   const theNextPage = nextPage[nextPage.length - 2];
        //   console.log("theNextPage", theNextPage);
        //   // find the inner text of the next page button
        //   const nextPageText = theNextPage?.innerText
        //   console.log("nextPageText", nextPageText);
        //   if (nextPageText === "Next") {
        //     theNextPage.click();
        //     return true;
        //   } else {
        //     return false;
        //   }
        // });



        // if (nextPage) {
        //   await page.waitForNavigation();
        //   await page.waitForTimeout(1000);
        //   await flightPick();
        //   await page.waitForTimeout(1000);
        // } else {
        //   // if there is no next page button then return the opAndJet array
        //   console.log("no next page");
        //   return;
        // }
      };

      // add the function to the page so that it can be called from the electron app
      await page.exposeFunction("flightPick", flightPick);


      // add a button to the page to trigger the search
      await page.evaluate(() => {
        const button = document.createElement("triggerSearch");
        button.innerText = "Start Selecting";
        button.id = "searchButton";
        // position the button on the top right of the page make it red and give it a border
        button.style.position = "fixed";
        button.style.top = "0";
        button.style.right = "0";
        button.style.borderRadius = "3px";
        button.style.transition = "background-color 0.2s ease"
        button.style.background = "red";
        button.style.color = "white";
        // move to the left a bit
        button.style.marginRight = "10px";
        // flash the button
        button.style.marginTop = "10px";
        button.style.padding = "10px";
        // cursor pointer makes the button look clickable
        button.style.cursor = "pointer";
        // add the button to the page
        document.body.appendChild(button);
        // when the user clicks the button, call the search function
        button.addEventListener("click", () => {
          // now we can call the search function from the page
          flightPick();
        });

        // add the function to the window object so that

      });


      // when the button is clicked, call the flightPick function


    })
  })
  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
